// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'airport_detail_requirement.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

AirportDetailRequirement _$AirportDetailRequirementFromJson(
        Map<String, dynamic> json) =>
    AirportDetailRequirement(
      airportId: json['airportId'] as int,
      aTIS: json['ATIS'] as String?,
      aVGas: json['AVGas'] as bool?,
      airportFromHours: json['AirportFromHours'] as String?,
      airportHoursUTC: json['AirportHoursUTC'] as bool?,
      airportToHours: json['AirportToHours'] as String?,
      aoe: json['aoe'] as bool?,
      approachLights: json['ApproachLights'] as String?,
      archived: json['archived'] as bool?,
      atcNote: json['atcNote'] as String?,
      bearingToCityCenter: json['bearingToCityCenter'] as String?,
      cargoRestrictions: json['cargoRestrictions'] as String?,
      cityId: json['cityId'] as int?,
      civil: json['civil'] as bool?,
      clearance: json['Clearance'] as String?,
      commercial: json['Commercial'] as bool?,
      commercialNotes: json['CommercialNotes'] as String?,
      commercialParkingRestrictions:
          json['CommercialParkingRestrictions'] as bool?,
      countryId: json['countryId'] as int?,
      customs: json['customs'] as bool?,
      customsFromHours: json['CustomsFromHours'] as String?,
      customsHoursUTC: json['CustomsHoursUTC'] as bool?,
      customsToHours: json['CustomsToHours'] as String?,
      dSTOffset: json['DSTOffset'] as String?,
      drivingTime: json['drivingTime'] as String?,
      dstEndDate: json['dstEndDate'] as String?,
      dstStartDate: json['dstStartDate'] as String?,
      elevation: json['elevation'] as int?,
      fireCategory: json['fireCategory'] as int?,
      fireCategoryNote: json['fireCategoryNote'] as String?,
      fireCategoryUpgrade: json['fireCategoryUpgrade'] as String?,
      fuelRestrictions: json['fuelRestrictions'] as String?,
      generalAviation: json['GeneralAviation'] as bool?,
      generalAviationNotes: json['GeneralAviationNotes'] as String?,
      generalAviationParkingRestrictions:
          json['GeneralAviationParkingRestrictions'] as bool?,
      generalRemarks: json['generalRemarks'] as String?,
      generalRemarksCargo: json['generalRemarksCargo'] as String?,
      gmt: json['gmt'] as String?,
      ground: json['Ground'] as String?,
      ground1: json['Ground1'] as String?,
      h24: json['H24'] as bool?,
      iata: json['iata'] as String?,
      icao: json['icao'] as String?,
      isDST: json['isDST'] as bool?,
      isFireCategoryUpgrade: json['isFireCategoryUpgrade'] as bool?,
      jetA: json['JetA'] as bool?,
      jetA1: json['JetA1'] as bool?,
      jetB: json['JetB'] as bool?,
      latitude: json['latitude'] as String?,
      longitude: json['longitude'] as String?,
      military: json['military'] as bool?,
      name: json['name'] as String?,
      noiseCategory: json['noiseCategory'] as String?,
      operatingHoursNote: json['operatingHoursNote'] as String?,
      operationalAgenstLocation: json['operationalAgenstLocation'] as String?,
      operationalCustoms: json['operationalCustoms'] as String?,
      operationalHours: json['operationalHours'] as String?,
      operationalMeetingPoint: json['operationalMeetingPoint'] as String?,
      operationalParking: json['operationalParking'] as String?,
      operationalPermissions: json['operationalPermissions'] as String?,
      operationalRestrictions: json['operationalRestrictions'] as String?,
      ppr: json['ppr'] as bool?,
      referenceCode: json['referenceCode'] as String?,
      runwayFacilitiesNote: json['runwayFacilitiesNote'] as String?,
      runwayLights: json['RunwayLights'] as String?,
      slots: json['slots'] as bool?,
      tS1: json['TS1'] as bool?,
      taxiTime: json['taxiTime'] as String?,
      timezone: json['timezone'] as String?,
      timezoneNote: json['timezoneNote'] as String?,
      tower: json['Tower'] as String?,
      tower1: json['Tower1'] as String?,
      towerFromHours: json['TowerFromHours'] as String?,
      towerHoursUTC: json['TowerHoursUTC'] as bool?,
      towerToHours: json['TowerToHours'] as String?,
      uASSupervisorySvc: json['UASSupervisorySvc'] as bool?,
      uSLngdRights: json['USLngdRights'] as bool?,
      uSPreClear: json['USPreClear'] as bool?,
      uSSouthernAOE: json['USSouthernAOE'] as bool?,
      uASPartnerAgent: json['UASPartnerAgent'] as String?,
      runwayApproaches: (json['RunwayApproaches'] as List<dynamic>?)
          ?.map((e) => RunwayApproach.fromJson(e as Map<String, dynamic>))
          .toList(),
      runwayInformation: (json['RunwayInformation'] as List<dynamic>?)
          ?.map((e) => RunwayInformation.fromJson(e as Map<String, dynamic>))
          .toList(),
      alternatives: (json['Alternatives'] as List<dynamic>?)
          ?.map((e) => Alternative.fromJson(e as Map<String, dynamic>))
          .toList(),
      airportCity: json['AirportCity'] == null
          ? null
          : AirportCity.fromJson(json['AirportCity'] as Map<String, dynamic>),
      country: json['Country'] == null
          ? null
          : AirportDetailCountry.fromJson(
              json['Country'] as Map<String, dynamic>),
      airportAttachments: (json['AirportAttachments'] as List<dynamic>?)
          ?.map((e) => AirportAttachment.fromJson(e as Map<String, dynamic>))
          .toList(),
      airportProcedures: (json['AirportProcedures'] as List<dynamic>?)
          ?.map((e) => AirportProcedure.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$AirportDetailRequirementToJson(
        AirportDetailRequirement instance) =>
    <String, dynamic>{
      'airportId': instance.airportId,
      'name': instance.name,
      'countryId': instance.countryId,
      'cityId': instance.cityId,
      'iata': instance.iata,
      'icao': instance.icao,
      'elevation': instance.elevation,
      'longitude': instance.longitude,
      'latitude': instance.latitude,
      'civil': instance.civil,
      'military': instance.military,
      'aoe': instance.aoe,
      'UASSupervisorySvc': instance.uASSupervisorySvc,
      'slots': instance.slots,
      'H24': instance.h24,
      'USSouthernAOE': instance.uSSouthernAOE,
      'USLngdRights': instance.uSLngdRights,
      'USPreClear': instance.uSPreClear,
      'ppr': instance.ppr,
      'customs': instance.customs,
      'timezone': instance.timezone,
      'DSTOffset': instance.dSTOffset,
      'isDST': instance.isDST,
      'dstStartDate': instance.dstStartDate,
      'dstEndDate': instance.dstEndDate,
      'timezoneNote': instance.timezoneNote,
      'Tower': instance.tower,
      'gmt': instance.gmt,
      'Tower1': instance.tower1,
      'Ground': instance.ground,
      'Ground1': instance.ground1,
      'Clearance': instance.clearance,
      'ATIS': instance.aTIS,
      'atcNote': instance.atcNote,
      'AirportFromHours': instance.airportFromHours,
      'AirportToHours': instance.airportToHours,
      'TowerFromHours': instance.towerFromHours,
      'TowerToHours': instance.towerToHours,
      'AirportHoursUTC': instance.airportHoursUTC,
      'TowerHoursUTC': instance.towerHoursUTC,
      'operatingHoursNote': instance.operatingHoursNote,
      'noiseCategory': instance.noiseCategory,
      'referenceCode': instance.referenceCode,
      'fireCategory': instance.fireCategory,
      'fireCategoryUpgrade': instance.fireCategoryUpgrade,
      'fireCategoryNote': instance.fireCategoryNote,
      'isFireCategoryUpgrade': instance.isFireCategoryUpgrade,
      'JetA1': instance.jetA1,
      'JetA': instance.jetA,
      'JetB': instance.jetB,
      'AVGas': instance.aVGas,
      'TS1': instance.tS1,
      'fuelRestrictions': instance.fuelRestrictions,
      'generalRemarks': instance.generalRemarks,
      'cargoRestrictions': instance.cargoRestrictions,
      'generalRemarksCargo': instance.generalRemarksCargo,
      'RunwayLights': instance.runwayLights,
      'ApproachLights': instance.approachLights,
      'runwayFacilitiesNote': instance.runwayFacilitiesNote,
      'Commercial': instance.commercial,
      'CommercialParkingRestrictions': instance.commercialParkingRestrictions,
      'CommercialNotes': instance.commercialNotes,
      'GeneralAviation': instance.generalAviation,
      'GeneralAviationParkingRestrictions':
          instance.generalAviationParkingRestrictions,
      'GeneralAviationNotes': instance.generalAviationNotes,
      'CustomsFromHours': instance.customsFromHours,
      'CustomsToHours': instance.customsToHours,
      'CustomsHoursUTC': instance.customsHoursUTC,
      'bearingToCityCenter': instance.bearingToCityCenter,
      'drivingTime': instance.drivingTime,
      'operationalHours': instance.operationalHours,
      'operationalRestrictions': instance.operationalRestrictions,
      'operationalPermissions': instance.operationalPermissions,
      'operationalCustoms': instance.operationalCustoms,
      'operationalAgenstLocation': instance.operationalAgenstLocation,
      'operationalMeetingPoint': instance.operationalMeetingPoint,
      'operationalParking': instance.operationalParking,
      'taxiTime': instance.taxiTime,
      'archived': instance.archived,
      'UASPartnerAgent': instance.uASPartnerAgent,
      'RunwayApproaches':
          instance.runwayApproaches?.map((e) => e.toJson()).toList(),
      'RunwayInformation':
          instance.runwayInformation?.map((e) => e.toJson()).toList(),
      'Alternatives': instance.alternatives?.map((e) => e.toJson()).toList(),
      'AirportCity': instance.airportCity?.toJson(),
      'Country': instance.country?.toJson(),
      'AirportAttachments':
          instance.airportAttachments?.map((e) => e.toJson()).toList(),
      'AirportProcedures':
          instance.airportProcedures?.map((e) => e.toJson()).toList(),
    };
