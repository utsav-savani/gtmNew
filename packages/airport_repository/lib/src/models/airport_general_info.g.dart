// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'airport_general_info.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

AirportGeneralInfo _$AirportGeneralInfoFromJson(Map<String, dynamic> json) =>
    AirportGeneralInfo(
      airportId: json['airportId'] as int,
      name: json['name'] as String,
      countryId: json['countryId'] as int,
      cityId: json['cityId'] as int?,
      iata: json['iata'] as String,
      icao: json['icao'] as String,
      elevation: json['elevation'] as int,
      longitude: json['longitude'] as String,
      latitude: json['latitude'] as String,
      civil: json['civil'] as bool,
      military: json['military'] as bool,
      aoe: json['aoe'] as bool,
      UASSupervisorySvc: json['UASSupervisorySvc'] as bool,
      slots: json['slots'] as bool,
      H24: json['H24'] as bool,
      USSouthernAOE: json['USSouthernAOE'] as bool,
      USLngdRights: json['USLngdRights'] as bool,
      USPreClear: json['USPreClear'] as bool,
      ppr: json['ppr'] as bool,
      customs: json['customs'] as bool,
      timezone: json['timezone'] as String,
      DSTOffset: json['DSTOffset'] as String,
      isDST: json['isDST'] as bool,
      dstStartDate: json['dstStartDate'] as String?,
      dstEndDate: json['dstEndDate'] as String?,
      timezoneNote: json['timezoneNote'] as String,
      Tower: json['Tower'] as String,
      gmt: json['gmt'] as String,
      Tower1: json['Tower1'] as String,
      Ground: json['Ground'] as String,
      Ground1: json['Ground1'] as String,
      Clearance: json['Clearance'] as String,
      ATIS: json['ATIS'] as String,
      atcNote: json['atcNote'] as String,
      AirportFromHours: json['AirportFromHours'] as String?,
      AirportToHours: json['AirportToHours'] as String?,
      TowerFromHours: json['TowerFromHours'] as String?,
      TowerToHours: json['TowerToHours'] as String?,
      AirportHoursUTC: json['AirportHoursUTC'] as bool?,
      TowerHoursUTC: json['TowerHoursUTC'] as bool?,
      operatingHoursNote: json['operatingHoursNote'] as String,
      noiseCategory: json['noiseCategory'] as String?,
      referenceCode: json['referenceCode'] as String?,
      fireCategory: json['fireCategory'] as int?,
      fireCategoryUpgrade: json['fireCategoryUpgrade'] as String?,
      fireCategoryNote: json['fireCategoryNote'] as String?,
      isFireCategoryUpgrade: json['isFireCategoryUpgrade'] as bool,
      JetA1: json['JetA1'] as bool,
      JetA: json['JetA'] as bool,
      JetB: json['JetB'] as bool,
      AVGas: json['AVGas'] as bool,
      TS1: json['TS1'] as bool,
      fuelRestrictions: json['fuelRestrictions'] as String,
      generalRemarks: json['generalRemarks'] as String,
      cargoRestrictions: json['cargoRestrictions'] as String,
      generalRemarksCargo: json['generalRemarksCargo'] as String,
      RunwayLights: json['RunwayLights'] as String?,
      ApproachLights: json['ApproachLights'] as String?,
      runwayFacilitiesNote: json['runwayFacilitiesNote'] as String,
      Commercial: json['Commercial'] as bool,
      CommercialParkingRestrictions:
          json['CommercialParkingRestrictions'] as bool,
      CommercialNotes: json['CommercialNotes'] as String,
      GeneralAviation: json['GeneralAviation'] as bool,
      GeneralAviationParkingRestrictions:
          json['GeneralAviationParkingRestrictions'] as bool,
      GeneralAviationNotes: json['GeneralAviationNotes'] as String,
      CustomsFromHours: json['CustomsFromHours'] as String,
      CustomsToHours: json['CustomsToHours'] as String,
      CustomsHoursUTC: json['CustomsHoursUTC'] as bool,
      bearingToCityCenter: json['bearingToCityCenter'] as String?,
      drivingTime: json['drivingTime'] as String?,
      operationalHours: json['operationalHours'] as String?,
      operationalRestrictions: json['operationalRestrictions'] as String?,
      operationalPermissions: json['operationalPermissions'] as String?,
      operationalCustoms: json['operationalCustoms'] as String?,
      operationalAgenstLocation: json['operationalAgenstLocation'] as String?,
      operationalMeetingPoint: json['operationalMeetingPoint'] as String?,
      operationalParking: json['operationalParking'] as String?,
      taxiTime: json['taxiTime'] as String?,
      archived: json['archived'] as bool,
      RunwayApproaches: (json['RunwayApproaches'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      RunwayInformation: (json['RunwayInformation'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      Alternatives: (json['Alternatives'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      airportCity: json['AirportCity'] == null
          ? null
          : AirportCity.fromJson(json['AirportCity'] as Map<String, dynamic>),
      uASPartnerAgent: json['UASPartnerAgent'] as String,
      country: AirportCountry.fromJson(json['Country'] as Map<String, dynamic>),
      airportAttachmentsList: (json['AirportAttachments'] as List<dynamic>)
          .map((e) => AirportAttachment.fromJson(e as Map<String, dynamic>))
          .toList(),
      airportProceduresList: (json['AirportProcedures'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );

Map<String, dynamic> _$AirportGeneralInfoToJson(AirportGeneralInfo instance) =>
    <String, dynamic>{
      'airportId': instance.airportId,
      'name': instance.name,
      'countryId': instance.countryId,
      'cityId': instance.cityId,
      'iata': instance.iata,
      'icao': instance.icao,
      'elevation': instance.elevation,
      'longitude': instance.longitude,
      'latitude': instance.latitude,
      'civil': instance.civil,
      'military': instance.military,
      'aoe': instance.aoe,
      'UASSupervisorySvc': instance.UASSupervisorySvc,
      'slots': instance.slots,
      'H24': instance.H24,
      'USSouthernAOE': instance.USSouthernAOE,
      'USLngdRights': instance.USLngdRights,
      'USPreClear': instance.USPreClear,
      'ppr': instance.ppr,
      'customs': instance.customs,
      'timezone': instance.timezone,
      'DSTOffset': instance.DSTOffset,
      'isDST': instance.isDST,
      'dstStartDate': instance.dstStartDate,
      'dstEndDate': instance.dstEndDate,
      'timezoneNote': instance.timezoneNote,
      'Tower': instance.Tower,
      'gmt': instance.gmt,
      'Tower1': instance.Tower1,
      'Ground': instance.Ground,
      'Ground1': instance.Ground1,
      'Clearance': instance.Clearance,
      'ATIS': instance.ATIS,
      'atcNote': instance.atcNote,
      'AirportFromHours': instance.AirportFromHours,
      'AirportToHours': instance.AirportToHours,
      'TowerFromHours': instance.TowerFromHours,
      'TowerToHours': instance.TowerToHours,
      'AirportHoursUTC': instance.AirportHoursUTC,
      'TowerHoursUTC': instance.TowerHoursUTC,
      'operatingHoursNote': instance.operatingHoursNote,
      'noiseCategory': instance.noiseCategory,
      'referenceCode': instance.referenceCode,
      'fireCategory': instance.fireCategory,
      'fireCategoryUpgrade': instance.fireCategoryUpgrade,
      'fireCategoryNote': instance.fireCategoryNote,
      'isFireCategoryUpgrade': instance.isFireCategoryUpgrade,
      'JetA1': instance.JetA1,
      'JetA': instance.JetA,
      'JetB': instance.JetB,
      'AVGas': instance.AVGas,
      'TS1': instance.TS1,
      'fuelRestrictions': instance.fuelRestrictions,
      'generalRemarks': instance.generalRemarks,
      'cargoRestrictions': instance.cargoRestrictions,
      'generalRemarksCargo': instance.generalRemarksCargo,
      'RunwayLights': instance.RunwayLights,
      'ApproachLights': instance.ApproachLights,
      'runwayFacilitiesNote': instance.runwayFacilitiesNote,
      'Commercial': instance.Commercial,
      'CommercialParkingRestrictions': instance.CommercialParkingRestrictions,
      'CommercialNotes': instance.CommercialNotes,
      'GeneralAviation': instance.GeneralAviation,
      'GeneralAviationParkingRestrictions':
          instance.GeneralAviationParkingRestrictions,
      'GeneralAviationNotes': instance.GeneralAviationNotes,
      'CustomsFromHours': instance.CustomsFromHours,
      'CustomsToHours': instance.CustomsToHours,
      'CustomsHoursUTC': instance.CustomsHoursUTC,
      'bearingToCityCenter': instance.bearingToCityCenter,
      'drivingTime': instance.drivingTime,
      'operationalHours': instance.operationalHours,
      'operationalRestrictions': instance.operationalRestrictions,
      'operationalPermissions': instance.operationalPermissions,
      'operationalCustoms': instance.operationalCustoms,
      'operationalAgenstLocation': instance.operationalAgenstLocation,
      'operationalMeetingPoint': instance.operationalMeetingPoint,
      'operationalParking': instance.operationalParking,
      'taxiTime': instance.taxiTime,
      'archived': instance.archived,
      'RunwayApproaches': instance.RunwayApproaches,
      'RunwayInformation': instance.RunwayInformation,
      'Alternatives': instance.Alternatives,
      'AirportCity': instance.airportCity?.toJson(),
      'UASPartnerAgent': instance.uASPartnerAgent,
      'Country': instance.country.toJson(),
      'AirportAttachments':
          instance.airportAttachmentsList.map((e) => e.toJson()).toList(),
      'AirportProcedures': instance.airportProceduresList,
    };
