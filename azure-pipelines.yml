# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pr: none

trigger:
- release
- staging
- master

resources:
- repo: self

variables:
- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
    - group: QABranchVariables
- ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/staging') }}:
    - group: UATBranchVariables
- ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    - group: PRODBranchVariables

- name: imageRepository
  value: 'gtm'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        arguments: '--build-arg DOCKER_ENV=$(dockerEnv) --build-arg URL=$(URL) --build-arg versionNumber=$(versionNumber) --build-arg ENVIRONMENT=$(ENVIRONMENT) --build-arg APIBASEURL=$(APIBASEURL)'
    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: '$(env)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: '$(serviceConnection)'
              namespace: '$(namespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(serviceConnection)'
              namespace: '$(namespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'